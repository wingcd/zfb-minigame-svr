version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: minigame-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root123456
      MYSQL_DATABASE: minigame_server
      MYSQL_USER: minigame
      MYSQL_PASSWORD: minigame123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/sql:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - minigame-network
    restart: unless-stopped

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: minigame-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass "redis123456"
    networks:
      - minigame-network
    restart: unless-stopped

  # 管理后台服务
  admin-service:
    build:
      context: .
      dockerfile: Dockerfile.admin
    container_name: minigame-admin
    ports:
      - "8080:8080"
    environment:
      - GIN_MODE=release
    volumes:
      - ./logs:/root/logs
      - ./admin-service/conf:/root/conf
    depends_on:
      - mysql
      - redis
    networks:
      - minigame-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 游戏SDK服务
  game-service:
    build:
      context: .
      dockerfile: Dockerfile.game
    container_name: minigame-game
    ports:
      - "8081:8081"
    environment:
      - GIN_MODE=release
    volumes:
      - ./logs:/root/logs
      - ./game-service/conf:/root/conf
    depends_on:
      - mysql
      - redis
    networks:
      - minigame-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: minigame-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - admin-service
      - game-service
    networks:
      - minigame-network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  minigame-network:
    driver: bridge
